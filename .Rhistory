} else {
se <- (ub - lb)/5.15
}
print(se)
invisible(se)
}
convert.es.z("g", 0.13, 8528)
mean(c(-0.217, -0.003, -0.121))
convert.es.z("g", -0.1136667, 106)
convert.es.z("g", -0.1136667, 318)
convert.es.z("g", -0.04, 21242)
convert.es.z("g", -1.985, 400)
convert.es.z("g", -0.190, 400)
convert.CI.se(95, -0.877391, -0.095036)
convert.es.z("g", -0.73, 41)
convert.es.z("logOR", log(2.05), 41)
convert.es.z("logOR", log(2.05), 12318)
convert.es.z("logOR", log(1.63), 41)
convert.es.z("logOR", log(2.60), 41)
convert.CI.se(95, 0.134280, 0.260446)
convert.es.z("logOR", log(1.40), 41)
convert.es.z("logOR", log(5.90), 41)
means <- c(0.092621, 0.471613)
ns <- c(124, 100)
weighted.mean(means, ns)
convert.es.z("r", 0.23, 41)
convert.es.z("r", 0.12, 41)
convert.es.z("r", 0.33, 41)
convert.CI.se(95, 0.120581, 0.342828)
convert.es.z("r", 0.35, 41)
convert.es.z("r", 0.05, 41)
mean(c(9.35, 0.05))
mean(c(0.35, 0.05))
convert.es.z("r", 0.2, 41)
convert.es.z("r", 0.21, 41)
convert.es.z("r", 0.35, 41)
convert.CI.se(95, 0.213171, 0.365444)
convert.es.z("r", 0.38, 41)
convert.CI.se(95, 0.33, 0.51)
means<-c(0.50, 0.45)
ns<-c(61, 180)
weighted.mean(means, ns)
convert.es.z("g", -0.334, 22061)
convert.es.z("g", -0.392, 22061)
convert.es.z("g", -0.276, 22061)
convert.CI.se(95, -0.194773, -0.137570)
mean(c(0.50, 0.81, 0.49, 0.82))
convert.es.z("g", 0.655, 48)
convert.es.z("g", 0.21, 1802 )
convert.es.z("g", 0.48, 1802 )
convert.CI.se(95, 0.104852, 0.237851)
convert.es.z("r", 0.770, 1802 )
convert.es.z("logOR", log(1.3), 1802 )
convert.es.z("logOR", log(1.9), 1802 )
convert.CI.se(95, 0.072262, 0.176026)
convert.es.z("logOR", log(1.4), 1802 )
convert.CI.se(95, 0.092621, 0.176026)
convert.es.z("logOR", log(1.8), 1802 )
convert.es.z("logOR", log(0.8), 1802 )
convert.es.z("r", 0.63, 1802 )
mean(c(1.048, 0.950, 0.611, 0.366, 0.433, 0.436, 0.311, -0.006, 0.162, -0.018 ))
convert.es.z("g", 0.4293, 256)
mean(c(-0.69, 1.15, -0.19, 1.11, -0.85, -0.23))
convert.es.z("r", 0.066, 256)
convert.es.z("r", 0.082, 256)
convert.CI.se(95, 0.066096, 0.082185)
convert.es.z("r", 0.063, 256)
convert.es.z("g", -0.31, 21093)
convert.es.z("g", -0.41, 21093)
convert.es.z("g", -0.20, 21093)
convert.CI.se(95, -0.203598, -0.099838)
convert.es.z("g", 0.11, 600)
convert.es.z("g", -0.07, 600)
convert.es.z("g", 0.28, 600)
convert.CI.se(95, -0.035037, 0.139721)
convert.es.z("d", 1.61, 600)
convert.es.z("d", 1.31, 600)
convert.es.z("d", 1.91, 600)
convert.CI.se(95, 0.615412, 0.849193)
convert.es.z("d", 0.88, 600)
means<-c(1.51, 0.27)
ns<-c((37+45), (19+25))
weighted.mean(means, ns)
convert.es.z("g", 1.076984+, 126)
convert.es.z("g", 1.076984, 126)
convert.es.z("d", 1.076984, 126)
convert.es.z("g", 0.55, 24554)
convert.es.z("g", 0.66, 24554)
convert.CI.se(95, 0.271655, 0.324296)
convert.es.z("g", 0.60, 24554)
convert.CI.se(95, 0.271655, 0.295682)
convert.es.z("r", -0.07, 24554)
convert.es.z("r", 0.00, 24554)
convert.CI.se(95, -0.070115, 0.000000)
convert.es.z("r", -0.25, 24554)
convert.es.z("g", -0.26, 63)
convert.es.z("g", -0.76, 63)
convert.es.z("g", 0.25, 63)
convert.CI.se(95, -0.375839, 0.126227)
convert.es.z("g", 0.20, 698)
convert.es.z("g", -0.04, 698)
convert.es.z("g", 0.43, 698)
convert.CI.se(95, -0.020020, 0.213604)
convert.CI.se <- function(CI.type, lb, ub) {
valid.CI <- c(90, 95, 99)
if ((CI.type %in% valid.CI) == FALSE) {
stop("invalid CI type - please specify 90 or 95 or 99")
}
if (CI.type == 90) {
se <- (ub - lb)/3.29
} else if (CI.type == 95) {
se <- (ub - lb)/3.92
} else {
se <- (ub - lb)/5.15
}
print(se)
invisible(se)
}
# working examples----
convert.es.z(es.type = "r", es = 0.35, n = 100)  # example for effect size r with overall n
convert.es.z(es.type = "d", es = 0.50, n1 = 50, n2 = 60) # example for effect size d with group n
convert.es.z(es.type = "OR", ai = 20, bi = 100, ci = 10, di = 110)  # example for cell frequencies
z <- convert.es.z(es.type = "r", es = 0.35, n = 100)  # you can also store the z value in an object
convert.CI.se(95, 0.2889, 0.5397)  # worked example from Borenstein, p. 90
convert.CI.se(95, 0.152, 0.5645)  # worked example from Borenstein, p. 92
# examples of error messages----
convert.es.z(es.type = "test", es = 0.35, n = 100)  # should not work - invalid effect size
convert.es.z(es.type = "r", es = -1.5, n = 100)  # should not work - out of range value for r
convert.CI.se(89, 0.152, 0.5645) # should not work - invalid CI type
function(CI.type, lb, ub) {
valid.CI <- c(90, 95, 99)
if ((CI.type %in% valid.CI) == FALSE) {
stop("invalid CI type - please specify 90 or 95 or 99")
}
if (CI.type == 90) {
se <- (ub - lb)/3.29
} else if (CI.type == 95) {
se <- (ub - lb)/3.92
} else {
se <- (ub - lb)/5.15
}
print(se)
invisible(se)
}
convert.es.z <- function(es.type, es, n, n1, n2, ai, bi, ci, di) {
valid.es <- c("g", "d", "r", "logOR", "OR")
if ((es.type %in% valid.es) == FALSE) {
stop("invalid effect size!")
}
if (es.type == "OR") {
library(metafor)
es.type <- "logOR"
es <- as.numeric(escalc(ai = ai, bi = bi, ci = ci, di = di, measure = "OR")[1])
n <- ai + bi + ci + di
}
if (missing(n)) {
n <- n1 + n2
n_within <- "yes"
} else {
n_within <-"no"
}
if (es.type == "g") {
g <- es
J <- 1 - (3/(4 * (n - 2) - 1))
d <- g/J
if (n_within == "yes") {
r <- d/sqrt(d^2 + (n1 + n2)^2/(n1 * n2))
} else {
r <- d/sqrt(d^2 + 4)
}
} else if (es.type == "d") {
d <- es
if (n_within == "yes") {
r <- d/sqrt(d^2 + (n1 + n2)^2/(n1 * n2))
} else {
r <- d/sqrt(d^2 + 4)
}
} else if (es.type == "r") {
r <- es
if (abs(r) > 1) {
stop("effect size has out of range value!")
}
} else {
logOR <- es
d <- logOR * (sqrt(3)/pi)
r <- d/sqrt(d^2 + 4)
}
z <- 0.5 * log((1 + r)/(1 - r))
cat(sprintf("%s = %f, z = %f", es.type, es, z))
invisible(z)
}
convert.es.z("g", 0.34, 6240)
convert.es.z("g", 0.29, 6240)
convert.es.z("g", 0.39, 6240)
convert.CI.se(95, 0.144514, 0.193808)
convert.es.z("g", -0.42, 121)
convert.es.z("r", 0.17, 121)
convert.es.z("r", 0.10, 121)
convert.es.z("r", 0.23, 121)
convert.CI.se(95, 0.100335, 0.234189)
convert.es.z("r", 0.07, 121)
205 + 149
183 + 165
354 + 348
means <- c(0.25, 0.29)
ns <- c(354, 348)
weighted.mean(means, ns)
convert.es.z("g", 0.2698291, 702)
convert.es.z("g", 34, 301575)
convert.es.z("g", 0.34, 301575)
convert.es.z("g", 0.32, 301575)
convert.es.z("g", 0.36, 301575)
convert.CI.se(95, 0.159325, 0.179042)
convert.es.z("d", 0.61, 301575)
convert.es.z("d", 1.05, 301575)
convert.CI.se(95, 0.300459, 0.503460)
means <- c(2.608, 0.387, 1.501, 0.474)
ns <- c(15, 15, 12, 10)
weighted.mean(means, ns)
convert.es.z("d", 1.301481, 301575)
convert.es.z("logOR", log(1.91), 721)
convert.es.z("logOR", log(1.23), 721)
convert.es.z("logOR", log(1.19), 721)
convert.es.z("logOR", log(1.27), 721)
convert.CI.se(95, 0.047934, 0.065841)
mean(c(-0.29, 0.21, 0.21))
convert.es.z("r", -0.22, 721)
convert.es.z("r", -0.17, 721)
convert.CI.se(95, -0.223656, -0.171667)
convert.es.z("r", -0.24, 721)
convert.es.z("r", -0.16, 721)
convert.CI.se(95, -0.244774, -0.161387)
convert.es.z("r", 0.36, 721)
convert.es.z("d", 0.36, 721)
convert.es.z("d", 0.27, 721)
convert.es.z("d", 0.46, 721)
convert.CI.se(95, 0.134593, 0.228019)
mean(c(-0.34, 0.41, 0.19, 0.15, 0.37, 0.09))
mean(c(-0.22, 0.13, -0.49, -0.32, 0.52, 0.00))
mean(c(-0.38, 0.49, 0.39, 0.29, 0.31, 0.13))
means <- c(0.145, -0.06333333, 0.205)
ns <- c(104, 26, 78)
weighted.mean(means, ns)
convert.es.z("d", 0.1414583, 22)
convert.es.z("d", 0.46, 22)
convert.es.z("d", 0.31, 22)
convert.es.z("d", 0.60, 22)
convert.CI.se(95,0.154386, 0.295673)
mean(c(0.38, 0.38, 0.41))
mean(c(0.38, 0.38, 0.46))
convert.es.z("r", 0.07, 22)
convert.es.z("r", 0.17, 22)
convert.CI.se(95,0.070115, 0.171667)
convert.es.z("r", 0.41, 22)
convert.es.z("g", 0.358, 9120)
convert.es.z("g", 0.258, 9120)
convert.es.z("g", 0.244, 9120)
convert.es.z("g", 0.292, 9120)
convert.CI.se(95,0.121709, 0.145498)
convert.es.z("g", 0.224, 9120)
convert.CI.se(95,0.111776, 0.145498)
convert.es.z("g", -0.09, 9)
convert.es.z("g", -0.59, 9)
convert.es.z("g", -1.08, 9)
convert.es.z("g", -0.09, 9)
convert.CI.se(95,-0.575245, -0.050603)
convert.es.z("r", 0.19, 9)
convert.es.z("r", -0.09, 9)
convert.es.z("r", 0.54, 9)
convert.CI.se(95,-0.090244, 0.604156)
convert.es.z("r", 0.18, 9)
convert.es.z("r", 0.09, 9)
convert.es.z("r", 0.03, 9)
convert.es.z("r", 0.15, 9)
convert.CI.se(95, 0.030009, 0.151140)
means <- c(-0.32, 0.36)
ns <- c(54, 18)
weighted.mean(means, ns)
convert.es.z("r", 0.15, 9)
convert.es.z("r", -0.15, 9)
means <- c(0.03, 0.15, 0.05, -0.07, -0.05)
ns <- c(108, 117, 187, 51, 20)
weighted.mean(means, ns)
convert.es.z("r", 0.05293996, 9)
108 + 117 + 187 + 51 + 20
convert.es.z("g", -0.31,3)
convert.es.z("g", -0.31, 4088)
convert.es.z("g", -0.16, 4088)
convert.CI.se(95, -0.154414, -0.079930)
convert.es.z("g", -1.552764607, 12)
convert.es.z("g", 0.303264515, 17)
means <- c(-0.764427, 0.159084)
ns <- c(12, 17)
weighted.mean(means, ns)
means <- c(-1.552764607, 0.303264515)
weighted.mean(means, ns)
convert.es.z("g", 0.93, 4554)
convert.es.z("g", 0.88, 4554)
convert.es.z("g", 0.98, 4554)
convert.CI.se(95, 0.426980, 0.472322)
convert.es.z("g", 1.607037921, 30)
means <- c(0.11,0.12)
ns <- c(536, 260)
weighted.mean(means, ns)
convert.es.z("r", 0.1132663, 30)
convert.es.z("g", 0.09, 30)
convert.es.z("r", 0.09, 30)
convert.es.z("r", 0.08, 30)
convert.es.z("r", 0.11, 30)
convert.CI.se(95, 0.080171, 0.110447)
convert.es.z("r", 0.199, 30)
convert.es.z("r", 0.142, 30)
convert.es.z("r", 0.255, 30)
convert.CI.se(90, 0.142966, 0.260753)
means <- c(0.37, 0.066)
ns <- c(54,64)
weighted.mean(means, ns)
convert.es.z("r", 0.2051186, 30)
convert.es.z("d", 0.37, 30)
convert.es.z("d", 0.33, 30)
convert.es.z("d", 0.40, 30)
convert.CI.se(95, 0.164260, 0.198690)
mean(c(0.12, 0.32, 0.28, 0.47, -0.15, 0.19, 0.39, 0.41, 0.27))
convert.es.z("d", 0.2555556, 30)
convert.es.z("r", 0.04, 30)
convert.es.z("r", 0.15, 30)
convert.CI.se(95, 0.040021, 0.151140)
convert.es.z("r", -0.152, 30)
convert.es.z("r", -0.12, 30)
convert.es.z("g", 0.41, 2540)
convert.es.z("g", 0.60, 60)
convert.es.z("g", 0.3, 2540)
convert.es.z("g", 0.33, 2540)
convert.es.z("g", 0.49, 2540)
convert.CI.se(95, 0.164308, 0.242683)
convert.es.z("r", 0.24, 2540)
convert.es.z("r", 0.28, 2540)
convert.CI.se(95, 0.244774, 0.287682)
convert.es.z("r", 0.22, 2540)
convert.es.z("d", -0.08, 2540)
convert.es.z("d", -0.18, 2540)
convert.es.z("d", -0.02, 2540)
convert.CI.se(95, -0.089879, 0.287682)
convert.es.z("d", 0.02, 2540)
convert.CI.se(95, -0.089879, 0.010000)
convert.es.z("d", -0.397, 2540)
valid.es <- c("g", "d", "r", "logOR", "OR")
convert.CI.se <- function(CI.type, lb, ub) {
valid.CI <- c(90, 95, 99)
if ((CI.type %in% valid.CI) == FALSE) {
stop("invalid CI type - please specify 90 or 95 or 99")
}
if (CI.type == 90) {
se <- (ub - lb)/3.29
} else if (CI.type == 95) {
se <- (ub - lb)/3.92
} else {
se <- (ub - lb)/5.15
}
print(se)
invisible(se)
}
convert.es.z <- function(es.type, es, n, n1, n2, ai, bi, ci, di) {
valid.es <- c("g", "d", "r", "logOR", "OR")
if ((es.type %in% valid.es) == FALSE) {
stop("invalid effect size!")
}
if (es.type == "OR") {
library(metafor)
es.type <- "logOR"
es <- as.numeric(escalc(ai = ai, bi = bi, ci = ci, di = di, measure = "OR")[1])
n <- ai + bi + ci + di
}
if (missing(n)) {
n <- n1 + n2
n_within <- "yes"
} else {
n_within <-"no"
}
if (es.type == "g") {
g <- es
J <- 1 - (3/(4 * (n - 2) - 1))
d <- g/J
if (n_within == "yes") {
r <- d/sqrt(d^2 + (n1 + n2)^2/(n1 * n2))
} else {
r <- d/sqrt(d^2 + 4)
}
} else if (es.type == "d") {
d <- es
if (n_within == "yes") {
r <- d/sqrt(d^2 + (n1 + n2)^2/(n1 * n2))
} else {
r <- d/sqrt(d^2 + 4)
}
} else if (es.type == "r") {
r <- es
if (abs(r) > 1) {
stop("effect size has out of range value!")
}
} else {
logOR <- es
d <- logOR * (sqrt(3)/pi)
r <- d/sqrt(d^2 + 4)
}
z <- 0.5 * log((1 + r)/(1 - r))
cat(sprintf("%s = %f, z = %f", es.type, es, z))
invisible(z)
}
convert.es.z("r", 0.32, 1)
convert.es.z("r", 0.25, 1)
convert.es.z("r", 0.39, 1)
convert.CI.se(95, 0.255413, 0.411800)
convert.es.z("g", -0.16, 104)
z1 <-convert.es.z(es.type = "d", es = 0.27, n = 25)
z2 <-convert.es.z(es.type = "d", es = -0.82, n = 33)
z3 <-convert.es.z(es.type = "d", es = 0.74, n = 40)
z<-c(z1,z2,z3)
z.se1<-1/(sqrt(25-3))
z.se2<-1/(sqrt(33-3))
z.se3<-1/(sqrt(40-3))
z.se <-c(z.se1, z.se2, z.se3)
rma(z,z.se^2,method="ML")
library(metafor)
rma(z,z.se^2,method="ML")
random(1,2)
sample(1:2, 1)
sample(1:2, 1)
sample(1:2, 1)
sample(1:2, 1)
sample(1:2, 1)
sample(1:2, 1)
convert.es.z("g", -2.44, 600)
convert.es.z("g", -2.80, 600)
convert.es.z("g", -2.08, 600)
convert.CI.se(95,-1.139004,-0.910282)
convert.es.z("g", -2.99, 40)
# LIBRARIES ----
library(shiny)
library(shinyWidgets)
library(shinyjs)
library(foreign)
library(data.table)
library(here)
library(metafor)
library(metaviz)
library(ggplot2)
library(ggplotify)
library(gghighlight)
library(tidyverse)
library(shinydashboard)
library(DT)
library(puniform)
library(stringr)
library(poibin)
library(weightr)
library(pwr)
library(kableExtra)
library(haven)
library(htmltools)
library(rmarkdown)
options(scipen=999)
?fileInput
?req
library(shiny)
library(shinyWidgets)
library(shinyjs)
library(foreign)
library(data.table)
library(here)
library(metafor)
library(metaviz)
library(ggplot2)
library(ggplotify)
library(gghighlight)
library(tidyverse)
library(shinydashboard)
library(DT)
library(puniform)
library(stringr)
library(poibin)
library(weightr)
library(pwr)
library(kableExtra)
library(haven)
library(htmltools)
library(rmarkdown)
options(scipen=999)
?req
?isTruthy
isTruthy(input$file)
?read.spss
runApp('Documents/GitHub/shinyapp')
runApp('Documents/GitHub/shinyapp')
setwd("~/Documents/GitHub/shinyapp")
runApp()
runApp()
here()
# UI ----
source(here("ui_x.R"), local = TRUE)
?here
library(here)
library(metafor)
here()
setwd("~/Documents/GitHub/shinyapp")
library(here)
dr_here(show_reason = TRUE)
set_here(path = "~/Documents/GitHub/shinyapp", verbose = TRUE)
library(here)
# UI ----
source(here("ui_x.R"), local = TRUE)
runApp()
